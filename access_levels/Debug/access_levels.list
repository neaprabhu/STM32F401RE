
access_levels.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c20  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08000db4  08000db4  00010db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000e28  08000e28  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08000e28  08000e28  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e28  08000e28  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e28  08000e28  00010e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e2c  08000e2c  00010e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08000e30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  08000e8c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08000e8c  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000972  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000033e  00000000  00000000  00020a41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000138  00000000  00000000  00020d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000d6  00000000  00000000  00020eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002b55  00000000  00000000  00020f8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001380  00000000  00000000  00023ae3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009805  00000000  00000000  00024e63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000a50  00000000  00000000  0002e668  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0002f0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000005c 	.word	0x2000005c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000d9c 	.word	0x08000d9c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000060 	.word	0x20000060
 80001d0:	08000d9c 	.word	0x08000d9c

080001d4 <generate_interrupt>:
#include<stdio.h>
#include<stdint.h>

/* This function executes in THREAD MODE of the processor */
void generate_interrupt()
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
	uint32_t *pSTIR  = (uint32_t*)0xE000EF00;
 80001da:	4b09      	ldr	r3, [pc, #36]	; (8000200 <generate_interrupt+0x2c>)
 80001dc:	607b      	str	r3, [r7, #4]
	uint32_t *pISER0 = (uint32_t*)0xE000E100;
 80001de:	4b09      	ldr	r3, [pc, #36]	; (8000204 <generate_interrupt+0x30>)
 80001e0:	603b      	str	r3, [r7, #0]

	//enable IRQ3 interrupt
	*pISER0 |= ( 1 << 3);
 80001e2:	683b      	ldr	r3, [r7, #0]
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	f043 0208 	orr.w	r2, r3, #8
 80001ea:	683b      	ldr	r3, [r7, #0]
 80001ec:	601a      	str	r2, [r3, #0]

	//generate an interrupt from software for IRQ3
	*pSTIR = (3 & 0x1FF);
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	2203      	movs	r2, #3
 80001f2:	601a      	str	r2, [r3, #0]

}
 80001f4:	bf00      	nop
 80001f6:	370c      	adds	r7, #12
 80001f8:	46bd      	mov	sp, r7
 80001fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fe:	4770      	bx	lr
 8000200:	e000ef00 	.word	0xe000ef00
 8000204:	e000e100 	.word	0xe000e100

08000208 <change_access_level_unpriv>:

void change_access_level_unpriv(void)
{
 8000208:	b480      	push	{r7}
 800020a:	af00      	add	r7, sp, #0
	//read
	__asm volatile("MRS R0,CONTROL");
 800020c:	f3ef 8014 	mrs	r0, CONTROL
	//modify
	// We can use the ORR assembly instruction to do an OR
	__asm volatile("ORR R0,R0,#0x01");
 8000210:	f040 0001 	orr.w	r0, r0, #1
	//write
	__asm volatile("MSR CONTROL,R0");
 8000214:	f380 8814 	msr	CONTROL, r0
}
 8000218:	bf00      	nop
 800021a:	46bd      	mov	sp, r7
 800021c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000220:	4770      	bx	lr
	...

08000224 <main>:



/* This function executes in THREAD MODE of the processor */
int main(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	printf("In thread mode : before interrupt\n");
 8000228:	4805      	ldr	r0, [pc, #20]	; (8000240 <main+0x1c>)
 800022a:	f000 fa21 	bl	8000670 <puts>

	change_access_level_unpriv();
 800022e:	f7ff ffeb 	bl	8000208 <change_access_level_unpriv>

	generate_interrupt();
 8000232:	f7ff ffcf 	bl	80001d4 <generate_interrupt>

	printf("In thread mode : after interrupt\n");
 8000236:	4803      	ldr	r0, [pc, #12]	; (8000244 <main+0x20>)
 8000238:	f000 fa1a 	bl	8000670 <puts>

	for(;;);
 800023c:	e7fe      	b.n	800023c <main+0x18>
 800023e:	bf00      	nop
 8000240:	08000db4 	.word	0x08000db4
 8000244:	08000dd8 	.word	0x08000dd8

08000248 <HardFault_Handler>:
{
	printf("In handler mode : ISR\n");
}

void HardFault_Handler(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
	printf("Hard fault detected\n");
 800024c:	4801      	ldr	r0, [pc, #4]	; (8000254 <HardFault_Handler+0xc>)
 800024e:	f000 fa0f 	bl	8000670 <puts>
	while(1);
 8000252:	e7fe      	b.n	8000252 <HardFault_Handler+0xa>
 8000254:	08000e14 	.word	0x08000e14

08000258 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000258:	b480      	push	{r7}
 800025a:	b083      	sub	sp, #12
 800025c:	af00      	add	r7, sp, #0
 800025e:	4603      	mov	r3, r0
 8000260:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000262:	4b0f      	ldr	r3, [pc, #60]	; (80002a0 <ITM_SendChar+0x48>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	4a0e      	ldr	r2, [pc, #56]	; (80002a0 <ITM_SendChar+0x48>)
 8000268:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800026c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800026e:	4b0d      	ldr	r3, [pc, #52]	; (80002a4 <ITM_SendChar+0x4c>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	4a0c      	ldr	r2, [pc, #48]	; (80002a4 <ITM_SendChar+0x4c>)
 8000274:	f043 0301 	orr.w	r3, r3, #1
 8000278:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800027a:	bf00      	nop
 800027c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	f003 0301 	and.w	r3, r3, #1
 8000286:	2b00      	cmp	r3, #0
 8000288:	d0f8      	beq.n	800027c <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800028a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800028e:	79fb      	ldrb	r3, [r7, #7]
 8000290:	6013      	str	r3, [r2, #0]
}
 8000292:	bf00      	nop
 8000294:	370c      	adds	r7, #12
 8000296:	46bd      	mov	sp, r7
 8000298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop
 80002a0:	e000edfc 	.word	0xe000edfc
 80002a4:	e0000e00 	.word	0xe0000e00

080002a8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b086      	sub	sp, #24
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	60f8      	str	r0, [r7, #12]
 80002b0:	60b9      	str	r1, [r7, #8]
 80002b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002b4:	2300      	movs	r3, #0
 80002b6:	617b      	str	r3, [r7, #20]
 80002b8:	e00a      	b.n	80002d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80002ba:	f3af 8000 	nop.w
 80002be:	4601      	mov	r1, r0
 80002c0:	68bb      	ldr	r3, [r7, #8]
 80002c2:	1c5a      	adds	r2, r3, #1
 80002c4:	60ba      	str	r2, [r7, #8]
 80002c6:	b2ca      	uxtb	r2, r1
 80002c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002ca:	697b      	ldr	r3, [r7, #20]
 80002cc:	3301      	adds	r3, #1
 80002ce:	617b      	str	r3, [r7, #20]
 80002d0:	697a      	ldr	r2, [r7, #20]
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	429a      	cmp	r2, r3
 80002d6:	dbf0      	blt.n	80002ba <_read+0x12>
  }

  return len;
 80002d8:	687b      	ldr	r3, [r7, #4]
}
 80002da:	4618      	mov	r0, r3
 80002dc:	3718      	adds	r7, #24
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}

080002e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80002e2:	b580      	push	{r7, lr}
 80002e4:	b086      	sub	sp, #24
 80002e6:	af00      	add	r7, sp, #0
 80002e8:	60f8      	str	r0, [r7, #12]
 80002ea:	60b9      	str	r1, [r7, #8]
 80002ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002ee:	2300      	movs	r3, #0
 80002f0:	617b      	str	r3, [r7, #20]
 80002f2:	e009      	b.n	8000308 <_write+0x26>
  {
    //__io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 80002f4:	68bb      	ldr	r3, [r7, #8]
 80002f6:	1c5a      	adds	r2, r3, #1
 80002f8:	60ba      	str	r2, [r7, #8]
 80002fa:	781b      	ldrb	r3, [r3, #0]
 80002fc:	4618      	mov	r0, r3
 80002fe:	f7ff ffab 	bl	8000258 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000302:	697b      	ldr	r3, [r7, #20]
 8000304:	3301      	adds	r3, #1
 8000306:	617b      	str	r3, [r7, #20]
 8000308:	697a      	ldr	r2, [r7, #20]
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	429a      	cmp	r2, r3
 800030e:	dbf1      	blt.n	80002f4 <_write+0x12>
  }
  return len;
 8000310:	687b      	ldr	r3, [r7, #4]
}
 8000312:	4618      	mov	r0, r3
 8000314:	3718      	adds	r7, #24
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}

0800031a <_close>:

int _close(int file)
{
 800031a:	b480      	push	{r7}
 800031c:	b083      	sub	sp, #12
 800031e:	af00      	add	r7, sp, #0
 8000320:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000322:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000326:	4618      	mov	r0, r3
 8000328:	370c      	adds	r7, #12
 800032a:	46bd      	mov	sp, r7
 800032c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000330:	4770      	bx	lr

08000332 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000332:	b480      	push	{r7}
 8000334:	b083      	sub	sp, #12
 8000336:	af00      	add	r7, sp, #0
 8000338:	6078      	str	r0, [r7, #4]
 800033a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800033c:	683b      	ldr	r3, [r7, #0]
 800033e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000342:	605a      	str	r2, [r3, #4]
  return 0;
 8000344:	2300      	movs	r3, #0
}
 8000346:	4618      	mov	r0, r3
 8000348:	370c      	adds	r7, #12
 800034a:	46bd      	mov	sp, r7
 800034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000350:	4770      	bx	lr

08000352 <_isatty>:

int _isatty(int file)
{
 8000352:	b480      	push	{r7}
 8000354:	b083      	sub	sp, #12
 8000356:	af00      	add	r7, sp, #0
 8000358:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800035a:	2301      	movs	r3, #1
}
 800035c:	4618      	mov	r0, r3
 800035e:	370c      	adds	r7, #12
 8000360:	46bd      	mov	sp, r7
 8000362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000366:	4770      	bx	lr

08000368 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000368:	b480      	push	{r7}
 800036a:	b085      	sub	sp, #20
 800036c:	af00      	add	r7, sp, #0
 800036e:	60f8      	str	r0, [r7, #12]
 8000370:	60b9      	str	r1, [r7, #8]
 8000372:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000374:	2300      	movs	r3, #0
}
 8000376:	4618      	mov	r0, r3
 8000378:	3714      	adds	r7, #20
 800037a:	46bd      	mov	sp, r7
 800037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000380:	4770      	bx	lr
	...

08000384 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b086      	sub	sp, #24
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800038c:	4a14      	ldr	r2, [pc, #80]	; (80003e0 <_sbrk+0x5c>)
 800038e:	4b15      	ldr	r3, [pc, #84]	; (80003e4 <_sbrk+0x60>)
 8000390:	1ad3      	subs	r3, r2, r3
 8000392:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000394:	697b      	ldr	r3, [r7, #20]
 8000396:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000398:	4b13      	ldr	r3, [pc, #76]	; (80003e8 <_sbrk+0x64>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	2b00      	cmp	r3, #0
 800039e:	d102      	bne.n	80003a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80003a0:	4b11      	ldr	r3, [pc, #68]	; (80003e8 <_sbrk+0x64>)
 80003a2:	4a12      	ldr	r2, [pc, #72]	; (80003ec <_sbrk+0x68>)
 80003a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80003a6:	4b10      	ldr	r3, [pc, #64]	; (80003e8 <_sbrk+0x64>)
 80003a8:	681a      	ldr	r2, [r3, #0]
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	4413      	add	r3, r2
 80003ae:	693a      	ldr	r2, [r7, #16]
 80003b0:	429a      	cmp	r2, r3
 80003b2:	d207      	bcs.n	80003c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80003b4:	f000 f96c 	bl	8000690 <__errno>
 80003b8:	4603      	mov	r3, r0
 80003ba:	220c      	movs	r2, #12
 80003bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80003be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80003c2:	e009      	b.n	80003d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80003c4:	4b08      	ldr	r3, [pc, #32]	; (80003e8 <_sbrk+0x64>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80003ca:	4b07      	ldr	r3, [pc, #28]	; (80003e8 <_sbrk+0x64>)
 80003cc:	681a      	ldr	r2, [r3, #0]
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	4413      	add	r3, r2
 80003d2:	4a05      	ldr	r2, [pc, #20]	; (80003e8 <_sbrk+0x64>)
 80003d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80003d6:	68fb      	ldr	r3, [r7, #12]
}
 80003d8:	4618      	mov	r0, r3
 80003da:	3718      	adds	r7, #24
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	20018000 	.word	0x20018000
 80003e4:	00000400 	.word	0x00000400
 80003e8:	20000078 	.word	0x20000078
 80003ec:	200001c8 	.word	0x200001c8

080003f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003f0:	480d      	ldr	r0, [pc, #52]	; (8000428 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003f2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003f4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003f8:	480c      	ldr	r0, [pc, #48]	; (800042c <LoopForever+0x6>)
  ldr r1, =_edata
 80003fa:	490d      	ldr	r1, [pc, #52]	; (8000430 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003fc:	4a0d      	ldr	r2, [pc, #52]	; (8000434 <LoopForever+0xe>)
  movs r3, #0
 80003fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000400:	e002      	b.n	8000408 <LoopCopyDataInit>

08000402 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000402:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000404:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000406:	3304      	adds	r3, #4

08000408 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000408:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800040a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800040c:	d3f9      	bcc.n	8000402 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800040e:	4a0a      	ldr	r2, [pc, #40]	; (8000438 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000410:	4c0a      	ldr	r4, [pc, #40]	; (800043c <LoopForever+0x16>)
  movs r3, #0
 8000412:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000414:	e001      	b.n	800041a <LoopFillZerobss>

08000416 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000416:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000418:	3204      	adds	r2, #4

0800041a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800041a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800041c:	d3fb      	bcc.n	8000416 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800041e:	f000 f93d 	bl	800069c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000422:	f7ff feff 	bl	8000224 <main>

08000426 <LoopForever>:

LoopForever:
  b LoopForever
 8000426:	e7fe      	b.n	8000426 <LoopForever>
  ldr   r0, =_estack
 8000428:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800042c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000430:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000434:	08000e30 	.word	0x08000e30
  ldr r2, =_sbss
 8000438:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800043c:	200001c8 	.word	0x200001c8

08000440 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000440:	e7fe      	b.n	8000440 <ADC_IRQHandler>
	...

08000444 <std>:
 8000444:	2300      	movs	r3, #0
 8000446:	b510      	push	{r4, lr}
 8000448:	4604      	mov	r4, r0
 800044a:	e9c0 3300 	strd	r3, r3, [r0]
 800044e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000452:	6083      	str	r3, [r0, #8]
 8000454:	8181      	strh	r1, [r0, #12]
 8000456:	6643      	str	r3, [r0, #100]	; 0x64
 8000458:	81c2      	strh	r2, [r0, #14]
 800045a:	6183      	str	r3, [r0, #24]
 800045c:	4619      	mov	r1, r3
 800045e:	2208      	movs	r2, #8
 8000460:	305c      	adds	r0, #92	; 0x5c
 8000462:	f000 f90d 	bl	8000680 <memset>
 8000466:	4b0d      	ldr	r3, [pc, #52]	; (800049c <std+0x58>)
 8000468:	6263      	str	r3, [r4, #36]	; 0x24
 800046a:	4b0d      	ldr	r3, [pc, #52]	; (80004a0 <std+0x5c>)
 800046c:	62a3      	str	r3, [r4, #40]	; 0x28
 800046e:	4b0d      	ldr	r3, [pc, #52]	; (80004a4 <std+0x60>)
 8000470:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000472:	4b0d      	ldr	r3, [pc, #52]	; (80004a8 <std+0x64>)
 8000474:	6323      	str	r3, [r4, #48]	; 0x30
 8000476:	4b0d      	ldr	r3, [pc, #52]	; (80004ac <std+0x68>)
 8000478:	6224      	str	r4, [r4, #32]
 800047a:	429c      	cmp	r4, r3
 800047c:	d006      	beq.n	800048c <std+0x48>
 800047e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8000482:	4294      	cmp	r4, r2
 8000484:	d002      	beq.n	800048c <std+0x48>
 8000486:	33d0      	adds	r3, #208	; 0xd0
 8000488:	429c      	cmp	r4, r3
 800048a:	d105      	bne.n	8000498 <std+0x54>
 800048c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000494:	f000 b926 	b.w	80006e4 <__retarget_lock_init_recursive>
 8000498:	bd10      	pop	{r4, pc}
 800049a:	bf00      	nop
 800049c:	080009a1 	.word	0x080009a1
 80004a0:	080009c3 	.word	0x080009c3
 80004a4:	080009fb 	.word	0x080009fb
 80004a8:	08000a1f 	.word	0x08000a1f
 80004ac:	2000007c 	.word	0x2000007c

080004b0 <stdio_exit_handler>:
 80004b0:	4a02      	ldr	r2, [pc, #8]	; (80004bc <stdio_exit_handler+0xc>)
 80004b2:	4903      	ldr	r1, [pc, #12]	; (80004c0 <stdio_exit_handler+0x10>)
 80004b4:	4803      	ldr	r0, [pc, #12]	; (80004c4 <stdio_exit_handler+0x14>)
 80004b6:	f000 b869 	b.w	800058c <_fwalk_sglue>
 80004ba:	bf00      	nop
 80004bc:	20000000 	.word	0x20000000
 80004c0:	08000939 	.word	0x08000939
 80004c4:	2000000c 	.word	0x2000000c

080004c8 <cleanup_stdio>:
 80004c8:	6841      	ldr	r1, [r0, #4]
 80004ca:	4b0c      	ldr	r3, [pc, #48]	; (80004fc <cleanup_stdio+0x34>)
 80004cc:	4299      	cmp	r1, r3
 80004ce:	b510      	push	{r4, lr}
 80004d0:	4604      	mov	r4, r0
 80004d2:	d001      	beq.n	80004d8 <cleanup_stdio+0x10>
 80004d4:	f000 fa30 	bl	8000938 <_fflush_r>
 80004d8:	68a1      	ldr	r1, [r4, #8]
 80004da:	4b09      	ldr	r3, [pc, #36]	; (8000500 <cleanup_stdio+0x38>)
 80004dc:	4299      	cmp	r1, r3
 80004de:	d002      	beq.n	80004e6 <cleanup_stdio+0x1e>
 80004e0:	4620      	mov	r0, r4
 80004e2:	f000 fa29 	bl	8000938 <_fflush_r>
 80004e6:	68e1      	ldr	r1, [r4, #12]
 80004e8:	4b06      	ldr	r3, [pc, #24]	; (8000504 <cleanup_stdio+0x3c>)
 80004ea:	4299      	cmp	r1, r3
 80004ec:	d004      	beq.n	80004f8 <cleanup_stdio+0x30>
 80004ee:	4620      	mov	r0, r4
 80004f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80004f4:	f000 ba20 	b.w	8000938 <_fflush_r>
 80004f8:	bd10      	pop	{r4, pc}
 80004fa:	bf00      	nop
 80004fc:	2000007c 	.word	0x2000007c
 8000500:	200000e4 	.word	0x200000e4
 8000504:	2000014c 	.word	0x2000014c

08000508 <global_stdio_init.part.0>:
 8000508:	b510      	push	{r4, lr}
 800050a:	4b0b      	ldr	r3, [pc, #44]	; (8000538 <global_stdio_init.part.0+0x30>)
 800050c:	4c0b      	ldr	r4, [pc, #44]	; (800053c <global_stdio_init.part.0+0x34>)
 800050e:	4a0c      	ldr	r2, [pc, #48]	; (8000540 <global_stdio_init.part.0+0x38>)
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	4620      	mov	r0, r4
 8000514:	2200      	movs	r2, #0
 8000516:	2104      	movs	r1, #4
 8000518:	f7ff ff94 	bl	8000444 <std>
 800051c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000520:	2201      	movs	r2, #1
 8000522:	2109      	movs	r1, #9
 8000524:	f7ff ff8e 	bl	8000444 <std>
 8000528:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800052c:	2202      	movs	r2, #2
 800052e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000532:	2112      	movs	r1, #18
 8000534:	f7ff bf86 	b.w	8000444 <std>
 8000538:	200001b4 	.word	0x200001b4
 800053c:	2000007c 	.word	0x2000007c
 8000540:	080004b1 	.word	0x080004b1

08000544 <__sfp_lock_acquire>:
 8000544:	4801      	ldr	r0, [pc, #4]	; (800054c <__sfp_lock_acquire+0x8>)
 8000546:	f000 b8ce 	b.w	80006e6 <__retarget_lock_acquire_recursive>
 800054a:	bf00      	nop
 800054c:	200001b9 	.word	0x200001b9

08000550 <__sfp_lock_release>:
 8000550:	4801      	ldr	r0, [pc, #4]	; (8000558 <__sfp_lock_release+0x8>)
 8000552:	f000 b8c9 	b.w	80006e8 <__retarget_lock_release_recursive>
 8000556:	bf00      	nop
 8000558:	200001b9 	.word	0x200001b9

0800055c <__sinit>:
 800055c:	b510      	push	{r4, lr}
 800055e:	4604      	mov	r4, r0
 8000560:	f7ff fff0 	bl	8000544 <__sfp_lock_acquire>
 8000564:	6a23      	ldr	r3, [r4, #32]
 8000566:	b11b      	cbz	r3, 8000570 <__sinit+0x14>
 8000568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800056c:	f7ff bff0 	b.w	8000550 <__sfp_lock_release>
 8000570:	4b04      	ldr	r3, [pc, #16]	; (8000584 <__sinit+0x28>)
 8000572:	6223      	str	r3, [r4, #32]
 8000574:	4b04      	ldr	r3, [pc, #16]	; (8000588 <__sinit+0x2c>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d1f5      	bne.n	8000568 <__sinit+0xc>
 800057c:	f7ff ffc4 	bl	8000508 <global_stdio_init.part.0>
 8000580:	e7f2      	b.n	8000568 <__sinit+0xc>
 8000582:	bf00      	nop
 8000584:	080004c9 	.word	0x080004c9
 8000588:	200001b4 	.word	0x200001b4

0800058c <_fwalk_sglue>:
 800058c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000590:	4607      	mov	r7, r0
 8000592:	4688      	mov	r8, r1
 8000594:	4614      	mov	r4, r2
 8000596:	2600      	movs	r6, #0
 8000598:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800059c:	f1b9 0901 	subs.w	r9, r9, #1
 80005a0:	d505      	bpl.n	80005ae <_fwalk_sglue+0x22>
 80005a2:	6824      	ldr	r4, [r4, #0]
 80005a4:	2c00      	cmp	r4, #0
 80005a6:	d1f7      	bne.n	8000598 <_fwalk_sglue+0xc>
 80005a8:	4630      	mov	r0, r6
 80005aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80005ae:	89ab      	ldrh	r3, [r5, #12]
 80005b0:	2b01      	cmp	r3, #1
 80005b2:	d907      	bls.n	80005c4 <_fwalk_sglue+0x38>
 80005b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80005b8:	3301      	adds	r3, #1
 80005ba:	d003      	beq.n	80005c4 <_fwalk_sglue+0x38>
 80005bc:	4629      	mov	r1, r5
 80005be:	4638      	mov	r0, r7
 80005c0:	47c0      	blx	r8
 80005c2:	4306      	orrs	r6, r0
 80005c4:	3568      	adds	r5, #104	; 0x68
 80005c6:	e7e9      	b.n	800059c <_fwalk_sglue+0x10>

080005c8 <_puts_r>:
 80005c8:	6a03      	ldr	r3, [r0, #32]
 80005ca:	b570      	push	{r4, r5, r6, lr}
 80005cc:	6884      	ldr	r4, [r0, #8]
 80005ce:	4605      	mov	r5, r0
 80005d0:	460e      	mov	r6, r1
 80005d2:	b90b      	cbnz	r3, 80005d8 <_puts_r+0x10>
 80005d4:	f7ff ffc2 	bl	800055c <__sinit>
 80005d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80005da:	07db      	lsls	r3, r3, #31
 80005dc:	d405      	bmi.n	80005ea <_puts_r+0x22>
 80005de:	89a3      	ldrh	r3, [r4, #12]
 80005e0:	0598      	lsls	r0, r3, #22
 80005e2:	d402      	bmi.n	80005ea <_puts_r+0x22>
 80005e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80005e6:	f000 f87e 	bl	80006e6 <__retarget_lock_acquire_recursive>
 80005ea:	89a3      	ldrh	r3, [r4, #12]
 80005ec:	0719      	lsls	r1, r3, #28
 80005ee:	d513      	bpl.n	8000618 <_puts_r+0x50>
 80005f0:	6923      	ldr	r3, [r4, #16]
 80005f2:	b18b      	cbz	r3, 8000618 <_puts_r+0x50>
 80005f4:	3e01      	subs	r6, #1
 80005f6:	68a3      	ldr	r3, [r4, #8]
 80005f8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80005fc:	3b01      	subs	r3, #1
 80005fe:	60a3      	str	r3, [r4, #8]
 8000600:	b9e9      	cbnz	r1, 800063e <_puts_r+0x76>
 8000602:	2b00      	cmp	r3, #0
 8000604:	da2e      	bge.n	8000664 <_puts_r+0x9c>
 8000606:	4622      	mov	r2, r4
 8000608:	210a      	movs	r1, #10
 800060a:	4628      	mov	r0, r5
 800060c:	f000 fa0b 	bl	8000a26 <__swbuf_r>
 8000610:	3001      	adds	r0, #1
 8000612:	d007      	beq.n	8000624 <_puts_r+0x5c>
 8000614:	250a      	movs	r5, #10
 8000616:	e007      	b.n	8000628 <_puts_r+0x60>
 8000618:	4621      	mov	r1, r4
 800061a:	4628      	mov	r0, r5
 800061c:	f000 fa40 	bl	8000aa0 <__swsetup_r>
 8000620:	2800      	cmp	r0, #0
 8000622:	d0e7      	beq.n	80005f4 <_puts_r+0x2c>
 8000624:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8000628:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800062a:	07da      	lsls	r2, r3, #31
 800062c:	d405      	bmi.n	800063a <_puts_r+0x72>
 800062e:	89a3      	ldrh	r3, [r4, #12]
 8000630:	059b      	lsls	r3, r3, #22
 8000632:	d402      	bmi.n	800063a <_puts_r+0x72>
 8000634:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000636:	f000 f857 	bl	80006e8 <__retarget_lock_release_recursive>
 800063a:	4628      	mov	r0, r5
 800063c:	bd70      	pop	{r4, r5, r6, pc}
 800063e:	2b00      	cmp	r3, #0
 8000640:	da04      	bge.n	800064c <_puts_r+0x84>
 8000642:	69a2      	ldr	r2, [r4, #24]
 8000644:	429a      	cmp	r2, r3
 8000646:	dc06      	bgt.n	8000656 <_puts_r+0x8e>
 8000648:	290a      	cmp	r1, #10
 800064a:	d004      	beq.n	8000656 <_puts_r+0x8e>
 800064c:	6823      	ldr	r3, [r4, #0]
 800064e:	1c5a      	adds	r2, r3, #1
 8000650:	6022      	str	r2, [r4, #0]
 8000652:	7019      	strb	r1, [r3, #0]
 8000654:	e7cf      	b.n	80005f6 <_puts_r+0x2e>
 8000656:	4622      	mov	r2, r4
 8000658:	4628      	mov	r0, r5
 800065a:	f000 f9e4 	bl	8000a26 <__swbuf_r>
 800065e:	3001      	adds	r0, #1
 8000660:	d1c9      	bne.n	80005f6 <_puts_r+0x2e>
 8000662:	e7df      	b.n	8000624 <_puts_r+0x5c>
 8000664:	6823      	ldr	r3, [r4, #0]
 8000666:	250a      	movs	r5, #10
 8000668:	1c5a      	adds	r2, r3, #1
 800066a:	6022      	str	r2, [r4, #0]
 800066c:	701d      	strb	r5, [r3, #0]
 800066e:	e7db      	b.n	8000628 <_puts_r+0x60>

08000670 <puts>:
 8000670:	4b02      	ldr	r3, [pc, #8]	; (800067c <puts+0xc>)
 8000672:	4601      	mov	r1, r0
 8000674:	6818      	ldr	r0, [r3, #0]
 8000676:	f7ff bfa7 	b.w	80005c8 <_puts_r>
 800067a:	bf00      	nop
 800067c:	20000058 	.word	0x20000058

08000680 <memset>:
 8000680:	4402      	add	r2, r0
 8000682:	4603      	mov	r3, r0
 8000684:	4293      	cmp	r3, r2
 8000686:	d100      	bne.n	800068a <memset+0xa>
 8000688:	4770      	bx	lr
 800068a:	f803 1b01 	strb.w	r1, [r3], #1
 800068e:	e7f9      	b.n	8000684 <memset+0x4>

08000690 <__errno>:
 8000690:	4b01      	ldr	r3, [pc, #4]	; (8000698 <__errno+0x8>)
 8000692:	6818      	ldr	r0, [r3, #0]
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	20000058 	.word	0x20000058

0800069c <__libc_init_array>:
 800069c:	b570      	push	{r4, r5, r6, lr}
 800069e:	4d0d      	ldr	r5, [pc, #52]	; (80006d4 <__libc_init_array+0x38>)
 80006a0:	4c0d      	ldr	r4, [pc, #52]	; (80006d8 <__libc_init_array+0x3c>)
 80006a2:	1b64      	subs	r4, r4, r5
 80006a4:	10a4      	asrs	r4, r4, #2
 80006a6:	2600      	movs	r6, #0
 80006a8:	42a6      	cmp	r6, r4
 80006aa:	d109      	bne.n	80006c0 <__libc_init_array+0x24>
 80006ac:	4d0b      	ldr	r5, [pc, #44]	; (80006dc <__libc_init_array+0x40>)
 80006ae:	4c0c      	ldr	r4, [pc, #48]	; (80006e0 <__libc_init_array+0x44>)
 80006b0:	f000 fb74 	bl	8000d9c <_init>
 80006b4:	1b64      	subs	r4, r4, r5
 80006b6:	10a4      	asrs	r4, r4, #2
 80006b8:	2600      	movs	r6, #0
 80006ba:	42a6      	cmp	r6, r4
 80006bc:	d105      	bne.n	80006ca <__libc_init_array+0x2e>
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80006c4:	4798      	blx	r3
 80006c6:	3601      	adds	r6, #1
 80006c8:	e7ee      	b.n	80006a8 <__libc_init_array+0xc>
 80006ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80006ce:	4798      	blx	r3
 80006d0:	3601      	adds	r6, #1
 80006d2:	e7f2      	b.n	80006ba <__libc_init_array+0x1e>
 80006d4:	08000e28 	.word	0x08000e28
 80006d8:	08000e28 	.word	0x08000e28
 80006dc:	08000e28 	.word	0x08000e28
 80006e0:	08000e2c 	.word	0x08000e2c

080006e4 <__retarget_lock_init_recursive>:
 80006e4:	4770      	bx	lr

080006e6 <__retarget_lock_acquire_recursive>:
 80006e6:	4770      	bx	lr

080006e8 <__retarget_lock_release_recursive>:
 80006e8:	4770      	bx	lr
	...

080006ec <sbrk_aligned>:
 80006ec:	b570      	push	{r4, r5, r6, lr}
 80006ee:	4e0e      	ldr	r6, [pc, #56]	; (8000728 <sbrk_aligned+0x3c>)
 80006f0:	460c      	mov	r4, r1
 80006f2:	6831      	ldr	r1, [r6, #0]
 80006f4:	4605      	mov	r5, r0
 80006f6:	b911      	cbnz	r1, 80006fe <sbrk_aligned+0x12>
 80006f8:	f000 fae2 	bl	8000cc0 <_sbrk_r>
 80006fc:	6030      	str	r0, [r6, #0]
 80006fe:	4621      	mov	r1, r4
 8000700:	4628      	mov	r0, r5
 8000702:	f000 fadd 	bl	8000cc0 <_sbrk_r>
 8000706:	1c43      	adds	r3, r0, #1
 8000708:	d00a      	beq.n	8000720 <sbrk_aligned+0x34>
 800070a:	1cc4      	adds	r4, r0, #3
 800070c:	f024 0403 	bic.w	r4, r4, #3
 8000710:	42a0      	cmp	r0, r4
 8000712:	d007      	beq.n	8000724 <sbrk_aligned+0x38>
 8000714:	1a21      	subs	r1, r4, r0
 8000716:	4628      	mov	r0, r5
 8000718:	f000 fad2 	bl	8000cc0 <_sbrk_r>
 800071c:	3001      	adds	r0, #1
 800071e:	d101      	bne.n	8000724 <sbrk_aligned+0x38>
 8000720:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000724:	4620      	mov	r0, r4
 8000726:	bd70      	pop	{r4, r5, r6, pc}
 8000728:	200001c0 	.word	0x200001c0

0800072c <_malloc_r>:
 800072c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000730:	1ccd      	adds	r5, r1, #3
 8000732:	f025 0503 	bic.w	r5, r5, #3
 8000736:	3508      	adds	r5, #8
 8000738:	2d0c      	cmp	r5, #12
 800073a:	bf38      	it	cc
 800073c:	250c      	movcc	r5, #12
 800073e:	2d00      	cmp	r5, #0
 8000740:	4607      	mov	r7, r0
 8000742:	db01      	blt.n	8000748 <_malloc_r+0x1c>
 8000744:	42a9      	cmp	r1, r5
 8000746:	d905      	bls.n	8000754 <_malloc_r+0x28>
 8000748:	230c      	movs	r3, #12
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	2600      	movs	r6, #0
 800074e:	4630      	mov	r0, r6
 8000750:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000754:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000828 <_malloc_r+0xfc>
 8000758:	f000 f916 	bl	8000988 <__malloc_lock>
 800075c:	f8d8 3000 	ldr.w	r3, [r8]
 8000760:	461c      	mov	r4, r3
 8000762:	bb5c      	cbnz	r4, 80007bc <_malloc_r+0x90>
 8000764:	4629      	mov	r1, r5
 8000766:	4638      	mov	r0, r7
 8000768:	f7ff ffc0 	bl	80006ec <sbrk_aligned>
 800076c:	1c43      	adds	r3, r0, #1
 800076e:	4604      	mov	r4, r0
 8000770:	d155      	bne.n	800081e <_malloc_r+0xf2>
 8000772:	f8d8 4000 	ldr.w	r4, [r8]
 8000776:	4626      	mov	r6, r4
 8000778:	2e00      	cmp	r6, #0
 800077a:	d145      	bne.n	8000808 <_malloc_r+0xdc>
 800077c:	2c00      	cmp	r4, #0
 800077e:	d048      	beq.n	8000812 <_malloc_r+0xe6>
 8000780:	6823      	ldr	r3, [r4, #0]
 8000782:	4631      	mov	r1, r6
 8000784:	4638      	mov	r0, r7
 8000786:	eb04 0903 	add.w	r9, r4, r3
 800078a:	f000 fa99 	bl	8000cc0 <_sbrk_r>
 800078e:	4581      	cmp	r9, r0
 8000790:	d13f      	bne.n	8000812 <_malloc_r+0xe6>
 8000792:	6821      	ldr	r1, [r4, #0]
 8000794:	1a6d      	subs	r5, r5, r1
 8000796:	4629      	mov	r1, r5
 8000798:	4638      	mov	r0, r7
 800079a:	f7ff ffa7 	bl	80006ec <sbrk_aligned>
 800079e:	3001      	adds	r0, #1
 80007a0:	d037      	beq.n	8000812 <_malloc_r+0xe6>
 80007a2:	6823      	ldr	r3, [r4, #0]
 80007a4:	442b      	add	r3, r5
 80007a6:	6023      	str	r3, [r4, #0]
 80007a8:	f8d8 3000 	ldr.w	r3, [r8]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d038      	beq.n	8000822 <_malloc_r+0xf6>
 80007b0:	685a      	ldr	r2, [r3, #4]
 80007b2:	42a2      	cmp	r2, r4
 80007b4:	d12b      	bne.n	800080e <_malloc_r+0xe2>
 80007b6:	2200      	movs	r2, #0
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	e00f      	b.n	80007dc <_malloc_r+0xb0>
 80007bc:	6822      	ldr	r2, [r4, #0]
 80007be:	1b52      	subs	r2, r2, r5
 80007c0:	d41f      	bmi.n	8000802 <_malloc_r+0xd6>
 80007c2:	2a0b      	cmp	r2, #11
 80007c4:	d917      	bls.n	80007f6 <_malloc_r+0xca>
 80007c6:	1961      	adds	r1, r4, r5
 80007c8:	42a3      	cmp	r3, r4
 80007ca:	6025      	str	r5, [r4, #0]
 80007cc:	bf18      	it	ne
 80007ce:	6059      	strne	r1, [r3, #4]
 80007d0:	6863      	ldr	r3, [r4, #4]
 80007d2:	bf08      	it	eq
 80007d4:	f8c8 1000 	streq.w	r1, [r8]
 80007d8:	5162      	str	r2, [r4, r5]
 80007da:	604b      	str	r3, [r1, #4]
 80007dc:	4638      	mov	r0, r7
 80007de:	f104 060b 	add.w	r6, r4, #11
 80007e2:	f000 f8d7 	bl	8000994 <__malloc_unlock>
 80007e6:	f026 0607 	bic.w	r6, r6, #7
 80007ea:	1d23      	adds	r3, r4, #4
 80007ec:	1af2      	subs	r2, r6, r3
 80007ee:	d0ae      	beq.n	800074e <_malloc_r+0x22>
 80007f0:	1b9b      	subs	r3, r3, r6
 80007f2:	50a3      	str	r3, [r4, r2]
 80007f4:	e7ab      	b.n	800074e <_malloc_r+0x22>
 80007f6:	42a3      	cmp	r3, r4
 80007f8:	6862      	ldr	r2, [r4, #4]
 80007fa:	d1dd      	bne.n	80007b8 <_malloc_r+0x8c>
 80007fc:	f8c8 2000 	str.w	r2, [r8]
 8000800:	e7ec      	b.n	80007dc <_malloc_r+0xb0>
 8000802:	4623      	mov	r3, r4
 8000804:	6864      	ldr	r4, [r4, #4]
 8000806:	e7ac      	b.n	8000762 <_malloc_r+0x36>
 8000808:	4634      	mov	r4, r6
 800080a:	6876      	ldr	r6, [r6, #4]
 800080c:	e7b4      	b.n	8000778 <_malloc_r+0x4c>
 800080e:	4613      	mov	r3, r2
 8000810:	e7cc      	b.n	80007ac <_malloc_r+0x80>
 8000812:	230c      	movs	r3, #12
 8000814:	603b      	str	r3, [r7, #0]
 8000816:	4638      	mov	r0, r7
 8000818:	f000 f8bc 	bl	8000994 <__malloc_unlock>
 800081c:	e797      	b.n	800074e <_malloc_r+0x22>
 800081e:	6025      	str	r5, [r4, #0]
 8000820:	e7dc      	b.n	80007dc <_malloc_r+0xb0>
 8000822:	605b      	str	r3, [r3, #4]
 8000824:	deff      	udf	#255	; 0xff
 8000826:	bf00      	nop
 8000828:	200001bc 	.word	0x200001bc

0800082c <__sflush_r>:
 800082c:	898a      	ldrh	r2, [r1, #12]
 800082e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000832:	4605      	mov	r5, r0
 8000834:	0710      	lsls	r0, r2, #28
 8000836:	460c      	mov	r4, r1
 8000838:	d458      	bmi.n	80008ec <__sflush_r+0xc0>
 800083a:	684b      	ldr	r3, [r1, #4]
 800083c:	2b00      	cmp	r3, #0
 800083e:	dc05      	bgt.n	800084c <__sflush_r+0x20>
 8000840:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000842:	2b00      	cmp	r3, #0
 8000844:	dc02      	bgt.n	800084c <__sflush_r+0x20>
 8000846:	2000      	movs	r0, #0
 8000848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800084c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800084e:	2e00      	cmp	r6, #0
 8000850:	d0f9      	beq.n	8000846 <__sflush_r+0x1a>
 8000852:	2300      	movs	r3, #0
 8000854:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000858:	682f      	ldr	r7, [r5, #0]
 800085a:	6a21      	ldr	r1, [r4, #32]
 800085c:	602b      	str	r3, [r5, #0]
 800085e:	d032      	beq.n	80008c6 <__sflush_r+0x9a>
 8000860:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000862:	89a3      	ldrh	r3, [r4, #12]
 8000864:	075a      	lsls	r2, r3, #29
 8000866:	d505      	bpl.n	8000874 <__sflush_r+0x48>
 8000868:	6863      	ldr	r3, [r4, #4]
 800086a:	1ac0      	subs	r0, r0, r3
 800086c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800086e:	b10b      	cbz	r3, 8000874 <__sflush_r+0x48>
 8000870:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000872:	1ac0      	subs	r0, r0, r3
 8000874:	2300      	movs	r3, #0
 8000876:	4602      	mov	r2, r0
 8000878:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800087a:	6a21      	ldr	r1, [r4, #32]
 800087c:	4628      	mov	r0, r5
 800087e:	47b0      	blx	r6
 8000880:	1c43      	adds	r3, r0, #1
 8000882:	89a3      	ldrh	r3, [r4, #12]
 8000884:	d106      	bne.n	8000894 <__sflush_r+0x68>
 8000886:	6829      	ldr	r1, [r5, #0]
 8000888:	291d      	cmp	r1, #29
 800088a:	d82b      	bhi.n	80008e4 <__sflush_r+0xb8>
 800088c:	4a29      	ldr	r2, [pc, #164]	; (8000934 <__sflush_r+0x108>)
 800088e:	410a      	asrs	r2, r1
 8000890:	07d6      	lsls	r6, r2, #31
 8000892:	d427      	bmi.n	80008e4 <__sflush_r+0xb8>
 8000894:	2200      	movs	r2, #0
 8000896:	6062      	str	r2, [r4, #4]
 8000898:	04d9      	lsls	r1, r3, #19
 800089a:	6922      	ldr	r2, [r4, #16]
 800089c:	6022      	str	r2, [r4, #0]
 800089e:	d504      	bpl.n	80008aa <__sflush_r+0x7e>
 80008a0:	1c42      	adds	r2, r0, #1
 80008a2:	d101      	bne.n	80008a8 <__sflush_r+0x7c>
 80008a4:	682b      	ldr	r3, [r5, #0]
 80008a6:	b903      	cbnz	r3, 80008aa <__sflush_r+0x7e>
 80008a8:	6560      	str	r0, [r4, #84]	; 0x54
 80008aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80008ac:	602f      	str	r7, [r5, #0]
 80008ae:	2900      	cmp	r1, #0
 80008b0:	d0c9      	beq.n	8000846 <__sflush_r+0x1a>
 80008b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80008b6:	4299      	cmp	r1, r3
 80008b8:	d002      	beq.n	80008c0 <__sflush_r+0x94>
 80008ba:	4628      	mov	r0, r5
 80008bc:	f000 fa22 	bl	8000d04 <_free_r>
 80008c0:	2000      	movs	r0, #0
 80008c2:	6360      	str	r0, [r4, #52]	; 0x34
 80008c4:	e7c0      	b.n	8000848 <__sflush_r+0x1c>
 80008c6:	2301      	movs	r3, #1
 80008c8:	4628      	mov	r0, r5
 80008ca:	47b0      	blx	r6
 80008cc:	1c41      	adds	r1, r0, #1
 80008ce:	d1c8      	bne.n	8000862 <__sflush_r+0x36>
 80008d0:	682b      	ldr	r3, [r5, #0]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d0c5      	beq.n	8000862 <__sflush_r+0x36>
 80008d6:	2b1d      	cmp	r3, #29
 80008d8:	d001      	beq.n	80008de <__sflush_r+0xb2>
 80008da:	2b16      	cmp	r3, #22
 80008dc:	d101      	bne.n	80008e2 <__sflush_r+0xb6>
 80008de:	602f      	str	r7, [r5, #0]
 80008e0:	e7b1      	b.n	8000846 <__sflush_r+0x1a>
 80008e2:	89a3      	ldrh	r3, [r4, #12]
 80008e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008e8:	81a3      	strh	r3, [r4, #12]
 80008ea:	e7ad      	b.n	8000848 <__sflush_r+0x1c>
 80008ec:	690f      	ldr	r7, [r1, #16]
 80008ee:	2f00      	cmp	r7, #0
 80008f0:	d0a9      	beq.n	8000846 <__sflush_r+0x1a>
 80008f2:	0793      	lsls	r3, r2, #30
 80008f4:	680e      	ldr	r6, [r1, #0]
 80008f6:	bf08      	it	eq
 80008f8:	694b      	ldreq	r3, [r1, #20]
 80008fa:	600f      	str	r7, [r1, #0]
 80008fc:	bf18      	it	ne
 80008fe:	2300      	movne	r3, #0
 8000900:	eba6 0807 	sub.w	r8, r6, r7
 8000904:	608b      	str	r3, [r1, #8]
 8000906:	f1b8 0f00 	cmp.w	r8, #0
 800090a:	dd9c      	ble.n	8000846 <__sflush_r+0x1a>
 800090c:	6a21      	ldr	r1, [r4, #32]
 800090e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000910:	4643      	mov	r3, r8
 8000912:	463a      	mov	r2, r7
 8000914:	4628      	mov	r0, r5
 8000916:	47b0      	blx	r6
 8000918:	2800      	cmp	r0, #0
 800091a:	dc06      	bgt.n	800092a <__sflush_r+0xfe>
 800091c:	89a3      	ldrh	r3, [r4, #12]
 800091e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000922:	81a3      	strh	r3, [r4, #12]
 8000924:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000928:	e78e      	b.n	8000848 <__sflush_r+0x1c>
 800092a:	4407      	add	r7, r0
 800092c:	eba8 0800 	sub.w	r8, r8, r0
 8000930:	e7e9      	b.n	8000906 <__sflush_r+0xda>
 8000932:	bf00      	nop
 8000934:	dfbffffe 	.word	0xdfbffffe

08000938 <_fflush_r>:
 8000938:	b538      	push	{r3, r4, r5, lr}
 800093a:	690b      	ldr	r3, [r1, #16]
 800093c:	4605      	mov	r5, r0
 800093e:	460c      	mov	r4, r1
 8000940:	b913      	cbnz	r3, 8000948 <_fflush_r+0x10>
 8000942:	2500      	movs	r5, #0
 8000944:	4628      	mov	r0, r5
 8000946:	bd38      	pop	{r3, r4, r5, pc}
 8000948:	b118      	cbz	r0, 8000952 <_fflush_r+0x1a>
 800094a:	6a03      	ldr	r3, [r0, #32]
 800094c:	b90b      	cbnz	r3, 8000952 <_fflush_r+0x1a>
 800094e:	f7ff fe05 	bl	800055c <__sinit>
 8000952:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d0f3      	beq.n	8000942 <_fflush_r+0xa>
 800095a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800095c:	07d0      	lsls	r0, r2, #31
 800095e:	d404      	bmi.n	800096a <_fflush_r+0x32>
 8000960:	0599      	lsls	r1, r3, #22
 8000962:	d402      	bmi.n	800096a <_fflush_r+0x32>
 8000964:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000966:	f7ff febe 	bl	80006e6 <__retarget_lock_acquire_recursive>
 800096a:	4628      	mov	r0, r5
 800096c:	4621      	mov	r1, r4
 800096e:	f7ff ff5d 	bl	800082c <__sflush_r>
 8000972:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000974:	07da      	lsls	r2, r3, #31
 8000976:	4605      	mov	r5, r0
 8000978:	d4e4      	bmi.n	8000944 <_fflush_r+0xc>
 800097a:	89a3      	ldrh	r3, [r4, #12]
 800097c:	059b      	lsls	r3, r3, #22
 800097e:	d4e1      	bmi.n	8000944 <_fflush_r+0xc>
 8000980:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000982:	f7ff feb1 	bl	80006e8 <__retarget_lock_release_recursive>
 8000986:	e7dd      	b.n	8000944 <_fflush_r+0xc>

08000988 <__malloc_lock>:
 8000988:	4801      	ldr	r0, [pc, #4]	; (8000990 <__malloc_lock+0x8>)
 800098a:	f7ff beac 	b.w	80006e6 <__retarget_lock_acquire_recursive>
 800098e:	bf00      	nop
 8000990:	200001b8 	.word	0x200001b8

08000994 <__malloc_unlock>:
 8000994:	4801      	ldr	r0, [pc, #4]	; (800099c <__malloc_unlock+0x8>)
 8000996:	f7ff bea7 	b.w	80006e8 <__retarget_lock_release_recursive>
 800099a:	bf00      	nop
 800099c:	200001b8 	.word	0x200001b8

080009a0 <__sread>:
 80009a0:	b510      	push	{r4, lr}
 80009a2:	460c      	mov	r4, r1
 80009a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80009a8:	f000 f978 	bl	8000c9c <_read_r>
 80009ac:	2800      	cmp	r0, #0
 80009ae:	bfab      	itete	ge
 80009b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80009b2:	89a3      	ldrhlt	r3, [r4, #12]
 80009b4:	181b      	addge	r3, r3, r0
 80009b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80009ba:	bfac      	ite	ge
 80009bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80009be:	81a3      	strhlt	r3, [r4, #12]
 80009c0:	bd10      	pop	{r4, pc}

080009c2 <__swrite>:
 80009c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80009c6:	461f      	mov	r7, r3
 80009c8:	898b      	ldrh	r3, [r1, #12]
 80009ca:	05db      	lsls	r3, r3, #23
 80009cc:	4605      	mov	r5, r0
 80009ce:	460c      	mov	r4, r1
 80009d0:	4616      	mov	r6, r2
 80009d2:	d505      	bpl.n	80009e0 <__swrite+0x1e>
 80009d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80009d8:	2302      	movs	r3, #2
 80009da:	2200      	movs	r2, #0
 80009dc:	f000 f94c 	bl	8000c78 <_lseek_r>
 80009e0:	89a3      	ldrh	r3, [r4, #12]
 80009e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80009e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80009ea:	81a3      	strh	r3, [r4, #12]
 80009ec:	4632      	mov	r2, r6
 80009ee:	463b      	mov	r3, r7
 80009f0:	4628      	mov	r0, r5
 80009f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80009f6:	f000 b973 	b.w	8000ce0 <_write_r>

080009fa <__sseek>:
 80009fa:	b510      	push	{r4, lr}
 80009fc:	460c      	mov	r4, r1
 80009fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a02:	f000 f939 	bl	8000c78 <_lseek_r>
 8000a06:	1c43      	adds	r3, r0, #1
 8000a08:	89a3      	ldrh	r3, [r4, #12]
 8000a0a:	bf15      	itete	ne
 8000a0c:	6560      	strne	r0, [r4, #84]	; 0x54
 8000a0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000a12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000a16:	81a3      	strheq	r3, [r4, #12]
 8000a18:	bf18      	it	ne
 8000a1a:	81a3      	strhne	r3, [r4, #12]
 8000a1c:	bd10      	pop	{r4, pc}

08000a1e <__sclose>:
 8000a1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a22:	f000 b8f7 	b.w	8000c14 <_close_r>

08000a26 <__swbuf_r>:
 8000a26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a28:	460e      	mov	r6, r1
 8000a2a:	4614      	mov	r4, r2
 8000a2c:	4605      	mov	r5, r0
 8000a2e:	b118      	cbz	r0, 8000a38 <__swbuf_r+0x12>
 8000a30:	6a03      	ldr	r3, [r0, #32]
 8000a32:	b90b      	cbnz	r3, 8000a38 <__swbuf_r+0x12>
 8000a34:	f7ff fd92 	bl	800055c <__sinit>
 8000a38:	69a3      	ldr	r3, [r4, #24]
 8000a3a:	60a3      	str	r3, [r4, #8]
 8000a3c:	89a3      	ldrh	r3, [r4, #12]
 8000a3e:	071a      	lsls	r2, r3, #28
 8000a40:	d525      	bpl.n	8000a8e <__swbuf_r+0x68>
 8000a42:	6923      	ldr	r3, [r4, #16]
 8000a44:	b31b      	cbz	r3, 8000a8e <__swbuf_r+0x68>
 8000a46:	6823      	ldr	r3, [r4, #0]
 8000a48:	6922      	ldr	r2, [r4, #16]
 8000a4a:	1a98      	subs	r0, r3, r2
 8000a4c:	6963      	ldr	r3, [r4, #20]
 8000a4e:	b2f6      	uxtb	r6, r6
 8000a50:	4283      	cmp	r3, r0
 8000a52:	4637      	mov	r7, r6
 8000a54:	dc04      	bgt.n	8000a60 <__swbuf_r+0x3a>
 8000a56:	4621      	mov	r1, r4
 8000a58:	4628      	mov	r0, r5
 8000a5a:	f7ff ff6d 	bl	8000938 <_fflush_r>
 8000a5e:	b9e0      	cbnz	r0, 8000a9a <__swbuf_r+0x74>
 8000a60:	68a3      	ldr	r3, [r4, #8]
 8000a62:	3b01      	subs	r3, #1
 8000a64:	60a3      	str	r3, [r4, #8]
 8000a66:	6823      	ldr	r3, [r4, #0]
 8000a68:	1c5a      	adds	r2, r3, #1
 8000a6a:	6022      	str	r2, [r4, #0]
 8000a6c:	701e      	strb	r6, [r3, #0]
 8000a6e:	6962      	ldr	r2, [r4, #20]
 8000a70:	1c43      	adds	r3, r0, #1
 8000a72:	429a      	cmp	r2, r3
 8000a74:	d004      	beq.n	8000a80 <__swbuf_r+0x5a>
 8000a76:	89a3      	ldrh	r3, [r4, #12]
 8000a78:	07db      	lsls	r3, r3, #31
 8000a7a:	d506      	bpl.n	8000a8a <__swbuf_r+0x64>
 8000a7c:	2e0a      	cmp	r6, #10
 8000a7e:	d104      	bne.n	8000a8a <__swbuf_r+0x64>
 8000a80:	4621      	mov	r1, r4
 8000a82:	4628      	mov	r0, r5
 8000a84:	f7ff ff58 	bl	8000938 <_fflush_r>
 8000a88:	b938      	cbnz	r0, 8000a9a <__swbuf_r+0x74>
 8000a8a:	4638      	mov	r0, r7
 8000a8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a8e:	4621      	mov	r1, r4
 8000a90:	4628      	mov	r0, r5
 8000a92:	f000 f805 	bl	8000aa0 <__swsetup_r>
 8000a96:	2800      	cmp	r0, #0
 8000a98:	d0d5      	beq.n	8000a46 <__swbuf_r+0x20>
 8000a9a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8000a9e:	e7f4      	b.n	8000a8a <__swbuf_r+0x64>

08000aa0 <__swsetup_r>:
 8000aa0:	b538      	push	{r3, r4, r5, lr}
 8000aa2:	4b2a      	ldr	r3, [pc, #168]	; (8000b4c <__swsetup_r+0xac>)
 8000aa4:	4605      	mov	r5, r0
 8000aa6:	6818      	ldr	r0, [r3, #0]
 8000aa8:	460c      	mov	r4, r1
 8000aaa:	b118      	cbz	r0, 8000ab4 <__swsetup_r+0x14>
 8000aac:	6a03      	ldr	r3, [r0, #32]
 8000aae:	b90b      	cbnz	r3, 8000ab4 <__swsetup_r+0x14>
 8000ab0:	f7ff fd54 	bl	800055c <__sinit>
 8000ab4:	89a3      	ldrh	r3, [r4, #12]
 8000ab6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000aba:	0718      	lsls	r0, r3, #28
 8000abc:	d422      	bmi.n	8000b04 <__swsetup_r+0x64>
 8000abe:	06d9      	lsls	r1, r3, #27
 8000ac0:	d407      	bmi.n	8000ad2 <__swsetup_r+0x32>
 8000ac2:	2309      	movs	r3, #9
 8000ac4:	602b      	str	r3, [r5, #0]
 8000ac6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000aca:	81a3      	strh	r3, [r4, #12]
 8000acc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ad0:	e034      	b.n	8000b3c <__swsetup_r+0x9c>
 8000ad2:	0758      	lsls	r0, r3, #29
 8000ad4:	d512      	bpl.n	8000afc <__swsetup_r+0x5c>
 8000ad6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000ad8:	b141      	cbz	r1, 8000aec <__swsetup_r+0x4c>
 8000ada:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000ade:	4299      	cmp	r1, r3
 8000ae0:	d002      	beq.n	8000ae8 <__swsetup_r+0x48>
 8000ae2:	4628      	mov	r0, r5
 8000ae4:	f000 f90e 	bl	8000d04 <_free_r>
 8000ae8:	2300      	movs	r3, #0
 8000aea:	6363      	str	r3, [r4, #52]	; 0x34
 8000aec:	89a3      	ldrh	r3, [r4, #12]
 8000aee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000af2:	81a3      	strh	r3, [r4, #12]
 8000af4:	2300      	movs	r3, #0
 8000af6:	6063      	str	r3, [r4, #4]
 8000af8:	6923      	ldr	r3, [r4, #16]
 8000afa:	6023      	str	r3, [r4, #0]
 8000afc:	89a3      	ldrh	r3, [r4, #12]
 8000afe:	f043 0308 	orr.w	r3, r3, #8
 8000b02:	81a3      	strh	r3, [r4, #12]
 8000b04:	6923      	ldr	r3, [r4, #16]
 8000b06:	b94b      	cbnz	r3, 8000b1c <__swsetup_r+0x7c>
 8000b08:	89a3      	ldrh	r3, [r4, #12]
 8000b0a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000b0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b12:	d003      	beq.n	8000b1c <__swsetup_r+0x7c>
 8000b14:	4621      	mov	r1, r4
 8000b16:	4628      	mov	r0, r5
 8000b18:	f000 f840 	bl	8000b9c <__smakebuf_r>
 8000b1c:	89a0      	ldrh	r0, [r4, #12]
 8000b1e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000b22:	f010 0301 	ands.w	r3, r0, #1
 8000b26:	d00a      	beq.n	8000b3e <__swsetup_r+0x9e>
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60a3      	str	r3, [r4, #8]
 8000b2c:	6963      	ldr	r3, [r4, #20]
 8000b2e:	425b      	negs	r3, r3
 8000b30:	61a3      	str	r3, [r4, #24]
 8000b32:	6923      	ldr	r3, [r4, #16]
 8000b34:	b943      	cbnz	r3, 8000b48 <__swsetup_r+0xa8>
 8000b36:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000b3a:	d1c4      	bne.n	8000ac6 <__swsetup_r+0x26>
 8000b3c:	bd38      	pop	{r3, r4, r5, pc}
 8000b3e:	0781      	lsls	r1, r0, #30
 8000b40:	bf58      	it	pl
 8000b42:	6963      	ldrpl	r3, [r4, #20]
 8000b44:	60a3      	str	r3, [r4, #8]
 8000b46:	e7f4      	b.n	8000b32 <__swsetup_r+0x92>
 8000b48:	2000      	movs	r0, #0
 8000b4a:	e7f7      	b.n	8000b3c <__swsetup_r+0x9c>
 8000b4c:	20000058 	.word	0x20000058

08000b50 <__swhatbuf_r>:
 8000b50:	b570      	push	{r4, r5, r6, lr}
 8000b52:	460c      	mov	r4, r1
 8000b54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000b58:	2900      	cmp	r1, #0
 8000b5a:	b096      	sub	sp, #88	; 0x58
 8000b5c:	4615      	mov	r5, r2
 8000b5e:	461e      	mov	r6, r3
 8000b60:	da0d      	bge.n	8000b7e <__swhatbuf_r+0x2e>
 8000b62:	89a3      	ldrh	r3, [r4, #12]
 8000b64:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000b68:	f04f 0100 	mov.w	r1, #0
 8000b6c:	bf0c      	ite	eq
 8000b6e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8000b72:	2340      	movne	r3, #64	; 0x40
 8000b74:	2000      	movs	r0, #0
 8000b76:	6031      	str	r1, [r6, #0]
 8000b78:	602b      	str	r3, [r5, #0]
 8000b7a:	b016      	add	sp, #88	; 0x58
 8000b7c:	bd70      	pop	{r4, r5, r6, pc}
 8000b7e:	466a      	mov	r2, sp
 8000b80:	f000 f858 	bl	8000c34 <_fstat_r>
 8000b84:	2800      	cmp	r0, #0
 8000b86:	dbec      	blt.n	8000b62 <__swhatbuf_r+0x12>
 8000b88:	9901      	ldr	r1, [sp, #4]
 8000b8a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8000b8e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8000b92:	4259      	negs	r1, r3
 8000b94:	4159      	adcs	r1, r3
 8000b96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b9a:	e7eb      	b.n	8000b74 <__swhatbuf_r+0x24>

08000b9c <__smakebuf_r>:
 8000b9c:	898b      	ldrh	r3, [r1, #12]
 8000b9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000ba0:	079d      	lsls	r5, r3, #30
 8000ba2:	4606      	mov	r6, r0
 8000ba4:	460c      	mov	r4, r1
 8000ba6:	d507      	bpl.n	8000bb8 <__smakebuf_r+0x1c>
 8000ba8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000bac:	6023      	str	r3, [r4, #0]
 8000bae:	6123      	str	r3, [r4, #16]
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	6163      	str	r3, [r4, #20]
 8000bb4:	b002      	add	sp, #8
 8000bb6:	bd70      	pop	{r4, r5, r6, pc}
 8000bb8:	ab01      	add	r3, sp, #4
 8000bba:	466a      	mov	r2, sp
 8000bbc:	f7ff ffc8 	bl	8000b50 <__swhatbuf_r>
 8000bc0:	9900      	ldr	r1, [sp, #0]
 8000bc2:	4605      	mov	r5, r0
 8000bc4:	4630      	mov	r0, r6
 8000bc6:	f7ff fdb1 	bl	800072c <_malloc_r>
 8000bca:	b948      	cbnz	r0, 8000be0 <__smakebuf_r+0x44>
 8000bcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000bd0:	059a      	lsls	r2, r3, #22
 8000bd2:	d4ef      	bmi.n	8000bb4 <__smakebuf_r+0x18>
 8000bd4:	f023 0303 	bic.w	r3, r3, #3
 8000bd8:	f043 0302 	orr.w	r3, r3, #2
 8000bdc:	81a3      	strh	r3, [r4, #12]
 8000bde:	e7e3      	b.n	8000ba8 <__smakebuf_r+0xc>
 8000be0:	89a3      	ldrh	r3, [r4, #12]
 8000be2:	6020      	str	r0, [r4, #0]
 8000be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000be8:	81a3      	strh	r3, [r4, #12]
 8000bea:	9b00      	ldr	r3, [sp, #0]
 8000bec:	6163      	str	r3, [r4, #20]
 8000bee:	9b01      	ldr	r3, [sp, #4]
 8000bf0:	6120      	str	r0, [r4, #16]
 8000bf2:	b15b      	cbz	r3, 8000c0c <__smakebuf_r+0x70>
 8000bf4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000bf8:	4630      	mov	r0, r6
 8000bfa:	f000 f82d 	bl	8000c58 <_isatty_r>
 8000bfe:	b128      	cbz	r0, 8000c0c <__smakebuf_r+0x70>
 8000c00:	89a3      	ldrh	r3, [r4, #12]
 8000c02:	f023 0303 	bic.w	r3, r3, #3
 8000c06:	f043 0301 	orr.w	r3, r3, #1
 8000c0a:	81a3      	strh	r3, [r4, #12]
 8000c0c:	89a3      	ldrh	r3, [r4, #12]
 8000c0e:	431d      	orrs	r5, r3
 8000c10:	81a5      	strh	r5, [r4, #12]
 8000c12:	e7cf      	b.n	8000bb4 <__smakebuf_r+0x18>

08000c14 <_close_r>:
 8000c14:	b538      	push	{r3, r4, r5, lr}
 8000c16:	4d06      	ldr	r5, [pc, #24]	; (8000c30 <_close_r+0x1c>)
 8000c18:	2300      	movs	r3, #0
 8000c1a:	4604      	mov	r4, r0
 8000c1c:	4608      	mov	r0, r1
 8000c1e:	602b      	str	r3, [r5, #0]
 8000c20:	f7ff fb7b 	bl	800031a <_close>
 8000c24:	1c43      	adds	r3, r0, #1
 8000c26:	d102      	bne.n	8000c2e <_close_r+0x1a>
 8000c28:	682b      	ldr	r3, [r5, #0]
 8000c2a:	b103      	cbz	r3, 8000c2e <_close_r+0x1a>
 8000c2c:	6023      	str	r3, [r4, #0]
 8000c2e:	bd38      	pop	{r3, r4, r5, pc}
 8000c30:	200001c4 	.word	0x200001c4

08000c34 <_fstat_r>:
 8000c34:	b538      	push	{r3, r4, r5, lr}
 8000c36:	4d07      	ldr	r5, [pc, #28]	; (8000c54 <_fstat_r+0x20>)
 8000c38:	2300      	movs	r3, #0
 8000c3a:	4604      	mov	r4, r0
 8000c3c:	4608      	mov	r0, r1
 8000c3e:	4611      	mov	r1, r2
 8000c40:	602b      	str	r3, [r5, #0]
 8000c42:	f7ff fb76 	bl	8000332 <_fstat>
 8000c46:	1c43      	adds	r3, r0, #1
 8000c48:	d102      	bne.n	8000c50 <_fstat_r+0x1c>
 8000c4a:	682b      	ldr	r3, [r5, #0]
 8000c4c:	b103      	cbz	r3, 8000c50 <_fstat_r+0x1c>
 8000c4e:	6023      	str	r3, [r4, #0]
 8000c50:	bd38      	pop	{r3, r4, r5, pc}
 8000c52:	bf00      	nop
 8000c54:	200001c4 	.word	0x200001c4

08000c58 <_isatty_r>:
 8000c58:	b538      	push	{r3, r4, r5, lr}
 8000c5a:	4d06      	ldr	r5, [pc, #24]	; (8000c74 <_isatty_r+0x1c>)
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	4604      	mov	r4, r0
 8000c60:	4608      	mov	r0, r1
 8000c62:	602b      	str	r3, [r5, #0]
 8000c64:	f7ff fb75 	bl	8000352 <_isatty>
 8000c68:	1c43      	adds	r3, r0, #1
 8000c6a:	d102      	bne.n	8000c72 <_isatty_r+0x1a>
 8000c6c:	682b      	ldr	r3, [r5, #0]
 8000c6e:	b103      	cbz	r3, 8000c72 <_isatty_r+0x1a>
 8000c70:	6023      	str	r3, [r4, #0]
 8000c72:	bd38      	pop	{r3, r4, r5, pc}
 8000c74:	200001c4 	.word	0x200001c4

08000c78 <_lseek_r>:
 8000c78:	b538      	push	{r3, r4, r5, lr}
 8000c7a:	4d07      	ldr	r5, [pc, #28]	; (8000c98 <_lseek_r+0x20>)
 8000c7c:	4604      	mov	r4, r0
 8000c7e:	4608      	mov	r0, r1
 8000c80:	4611      	mov	r1, r2
 8000c82:	2200      	movs	r2, #0
 8000c84:	602a      	str	r2, [r5, #0]
 8000c86:	461a      	mov	r2, r3
 8000c88:	f7ff fb6e 	bl	8000368 <_lseek>
 8000c8c:	1c43      	adds	r3, r0, #1
 8000c8e:	d102      	bne.n	8000c96 <_lseek_r+0x1e>
 8000c90:	682b      	ldr	r3, [r5, #0]
 8000c92:	b103      	cbz	r3, 8000c96 <_lseek_r+0x1e>
 8000c94:	6023      	str	r3, [r4, #0]
 8000c96:	bd38      	pop	{r3, r4, r5, pc}
 8000c98:	200001c4 	.word	0x200001c4

08000c9c <_read_r>:
 8000c9c:	b538      	push	{r3, r4, r5, lr}
 8000c9e:	4d07      	ldr	r5, [pc, #28]	; (8000cbc <_read_r+0x20>)
 8000ca0:	4604      	mov	r4, r0
 8000ca2:	4608      	mov	r0, r1
 8000ca4:	4611      	mov	r1, r2
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	602a      	str	r2, [r5, #0]
 8000caa:	461a      	mov	r2, r3
 8000cac:	f7ff fafc 	bl	80002a8 <_read>
 8000cb0:	1c43      	adds	r3, r0, #1
 8000cb2:	d102      	bne.n	8000cba <_read_r+0x1e>
 8000cb4:	682b      	ldr	r3, [r5, #0]
 8000cb6:	b103      	cbz	r3, 8000cba <_read_r+0x1e>
 8000cb8:	6023      	str	r3, [r4, #0]
 8000cba:	bd38      	pop	{r3, r4, r5, pc}
 8000cbc:	200001c4 	.word	0x200001c4

08000cc0 <_sbrk_r>:
 8000cc0:	b538      	push	{r3, r4, r5, lr}
 8000cc2:	4d06      	ldr	r5, [pc, #24]	; (8000cdc <_sbrk_r+0x1c>)
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	4604      	mov	r4, r0
 8000cc8:	4608      	mov	r0, r1
 8000cca:	602b      	str	r3, [r5, #0]
 8000ccc:	f7ff fb5a 	bl	8000384 <_sbrk>
 8000cd0:	1c43      	adds	r3, r0, #1
 8000cd2:	d102      	bne.n	8000cda <_sbrk_r+0x1a>
 8000cd4:	682b      	ldr	r3, [r5, #0]
 8000cd6:	b103      	cbz	r3, 8000cda <_sbrk_r+0x1a>
 8000cd8:	6023      	str	r3, [r4, #0]
 8000cda:	bd38      	pop	{r3, r4, r5, pc}
 8000cdc:	200001c4 	.word	0x200001c4

08000ce0 <_write_r>:
 8000ce0:	b538      	push	{r3, r4, r5, lr}
 8000ce2:	4d07      	ldr	r5, [pc, #28]	; (8000d00 <_write_r+0x20>)
 8000ce4:	4604      	mov	r4, r0
 8000ce6:	4608      	mov	r0, r1
 8000ce8:	4611      	mov	r1, r2
 8000cea:	2200      	movs	r2, #0
 8000cec:	602a      	str	r2, [r5, #0]
 8000cee:	461a      	mov	r2, r3
 8000cf0:	f7ff faf7 	bl	80002e2 <_write>
 8000cf4:	1c43      	adds	r3, r0, #1
 8000cf6:	d102      	bne.n	8000cfe <_write_r+0x1e>
 8000cf8:	682b      	ldr	r3, [r5, #0]
 8000cfa:	b103      	cbz	r3, 8000cfe <_write_r+0x1e>
 8000cfc:	6023      	str	r3, [r4, #0]
 8000cfe:	bd38      	pop	{r3, r4, r5, pc}
 8000d00:	200001c4 	.word	0x200001c4

08000d04 <_free_r>:
 8000d04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000d06:	2900      	cmp	r1, #0
 8000d08:	d044      	beq.n	8000d94 <_free_r+0x90>
 8000d0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000d0e:	9001      	str	r0, [sp, #4]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	f1a1 0404 	sub.w	r4, r1, #4
 8000d16:	bfb8      	it	lt
 8000d18:	18e4      	addlt	r4, r4, r3
 8000d1a:	f7ff fe35 	bl	8000988 <__malloc_lock>
 8000d1e:	4a1e      	ldr	r2, [pc, #120]	; (8000d98 <_free_r+0x94>)
 8000d20:	9801      	ldr	r0, [sp, #4]
 8000d22:	6813      	ldr	r3, [r2, #0]
 8000d24:	b933      	cbnz	r3, 8000d34 <_free_r+0x30>
 8000d26:	6063      	str	r3, [r4, #4]
 8000d28:	6014      	str	r4, [r2, #0]
 8000d2a:	b003      	add	sp, #12
 8000d2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000d30:	f7ff be30 	b.w	8000994 <__malloc_unlock>
 8000d34:	42a3      	cmp	r3, r4
 8000d36:	d908      	bls.n	8000d4a <_free_r+0x46>
 8000d38:	6825      	ldr	r5, [r4, #0]
 8000d3a:	1961      	adds	r1, r4, r5
 8000d3c:	428b      	cmp	r3, r1
 8000d3e:	bf01      	itttt	eq
 8000d40:	6819      	ldreq	r1, [r3, #0]
 8000d42:	685b      	ldreq	r3, [r3, #4]
 8000d44:	1949      	addeq	r1, r1, r5
 8000d46:	6021      	streq	r1, [r4, #0]
 8000d48:	e7ed      	b.n	8000d26 <_free_r+0x22>
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	b10b      	cbz	r3, 8000d54 <_free_r+0x50>
 8000d50:	42a3      	cmp	r3, r4
 8000d52:	d9fa      	bls.n	8000d4a <_free_r+0x46>
 8000d54:	6811      	ldr	r1, [r2, #0]
 8000d56:	1855      	adds	r5, r2, r1
 8000d58:	42a5      	cmp	r5, r4
 8000d5a:	d10b      	bne.n	8000d74 <_free_r+0x70>
 8000d5c:	6824      	ldr	r4, [r4, #0]
 8000d5e:	4421      	add	r1, r4
 8000d60:	1854      	adds	r4, r2, r1
 8000d62:	42a3      	cmp	r3, r4
 8000d64:	6011      	str	r1, [r2, #0]
 8000d66:	d1e0      	bne.n	8000d2a <_free_r+0x26>
 8000d68:	681c      	ldr	r4, [r3, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	6053      	str	r3, [r2, #4]
 8000d6e:	440c      	add	r4, r1
 8000d70:	6014      	str	r4, [r2, #0]
 8000d72:	e7da      	b.n	8000d2a <_free_r+0x26>
 8000d74:	d902      	bls.n	8000d7c <_free_r+0x78>
 8000d76:	230c      	movs	r3, #12
 8000d78:	6003      	str	r3, [r0, #0]
 8000d7a:	e7d6      	b.n	8000d2a <_free_r+0x26>
 8000d7c:	6825      	ldr	r5, [r4, #0]
 8000d7e:	1961      	adds	r1, r4, r5
 8000d80:	428b      	cmp	r3, r1
 8000d82:	bf04      	itt	eq
 8000d84:	6819      	ldreq	r1, [r3, #0]
 8000d86:	685b      	ldreq	r3, [r3, #4]
 8000d88:	6063      	str	r3, [r4, #4]
 8000d8a:	bf04      	itt	eq
 8000d8c:	1949      	addeq	r1, r1, r5
 8000d8e:	6021      	streq	r1, [r4, #0]
 8000d90:	6054      	str	r4, [r2, #4]
 8000d92:	e7ca      	b.n	8000d2a <_free_r+0x26>
 8000d94:	b003      	add	sp, #12
 8000d96:	bd30      	pop	{r4, r5, pc}
 8000d98:	200001bc 	.word	0x200001bc

08000d9c <_init>:
 8000d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d9e:	bf00      	nop
 8000da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000da2:	bc08      	pop	{r3}
 8000da4:	469e      	mov	lr, r3
 8000da6:	4770      	bx	lr

08000da8 <_fini>:
 8000da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000daa:	bf00      	nop
 8000dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dae:	bc08      	pop	{r3}
 8000db0:	469e      	mov	lr, r3
 8000db2:	4770      	bx	lr
